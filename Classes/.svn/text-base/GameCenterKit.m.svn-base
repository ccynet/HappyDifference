//
//  GameCenterKit.m
//  HappyDifference
//
//  Created by zzyy on 11-12-14.
//  Copyright (c) 2011å¹´ __MyCompanyName__. All rights reserved.
//

#import "GameCenterKit.h"

@implementation GameCenterKit

@synthesize m_gameCenterAvailable;
@synthesize m_presentingViewController;
@synthesize m_match;
@synthesize m_delegate;

static GameCenterKit*   _sharedGameCenterKit = nil;

+(GameCenterKit*) sharedInstance
{
    if(!_sharedGameCenterKit)
    {
        _sharedGameCenterKit = [[GameCenterKit alloc]init];
    }
    return _sharedGameCenterKit;
}

-(BOOL) isGameCenterAvailable
{
    //check for presence of GKLocalPlayer Api
    Class gcClass = NSClassFromString(@"GKLocalPlayer");
    
    //check if the device is running iOS 4.1 or later
    NSString* reqSysVer = @"4.1";
    NSString* curSysVer = [[UIDevice currentDevice] systemVersion];
    BOOL    osVersionSupported = ([curSysVer compare:reqSysVer
                                            options:NSNumericSearch]
                                  != NSOrderedAscending);
    return (gcClass && osVersionSupported);
}
-(id)init
{
    if ((self = [super init])) {
        m_gameCenterAvailable = [self isGameCenterAvailable];
        if (m_gameCenterAvailable) {
            NSNotificationCenter* notify = [NSNotificationCenter defaultCenter];
            [notify addObserver:self selector:@selector(authenticationChanged) name:GKPlayerAuthenticationDidChangeNotificationName object:nil];
        }
    }
    return self;
}
-(void) authenticationChanged
{
    if ([GKLocalPlayer localPlayer].isAuthenticated && !m_userAuthenticated) {
        NSLog(@"Authentication changed: player authenticated.");
        m_userAuthenticated = TRUE;
    }
    else if (![GKLocalPlayer localPlayer].isAuthenticated && m_userAuthenticated)
    {
        NSLog(@"Authentication changed : player not authenticated.");
        m_userAuthenticated = FALSE;
    }
}
-(void) authenticateLocalLocalUser
{
    if (!m_gameCenterAvailable) {
        return;
    }
    
    NSLog(@"Authenticating local user....");
    if ([GKLocalPlayer localPlayer].authenticated == NO) {
        [[GKLocalPlayer localPlayer] authenticateWithCompletionHandler:nil]; 
    }
    else
    {
        NSLog(@"Already authenicated!");
    }
}
-(void) findMatchWithMinPlayers:(int) minPlayers maxPlayers:(int)maxPlayers 
                 viewController:(UIViewController*) viewController
                       delegate:(id<GameCenterKitDelegate>) theDelegate
{
    if(!m_gameCenterAvailable)
        return;
    
    m_matchStarted = NO;
    m_match = nil;
    m_presentingViewController = viewController;
    m_delegate = theDelegate;
    [m_presentingViewController dismissModalViewControllerAnimated:NO];
    
    GKMatchRequest* request = [[[GKMatchRequest alloc]init]autorelease];
    request.minPlayers = minPlayers;
    request.maxPlayers = maxPlayers;
    
    GKMatchmakerViewController* mmvc = [[[GKMatchmakerViewController alloc]initWithMatchRequest:request]autorelease];
    mmvc.matchmakerDelegate = self;
    [m_presentingViewController presentModalViewController:mmvc animated:YES];
}
//The user has cancelled matchmaking
-(void)matchmakerViewControllerWasCancelled:(GKMatchmakerViewController *)viewController
{
    [m_presentingViewController dismissModalViewControllerAnimated:YES];
}
//Matchmaking has failed with an error
-(void)matchmakerViewController:(GKMatchmakerViewController *)viewController didFailWithError:(NSError *)error
{
    [m_presentingViewController dismissModalViewControllerAnimated:YES];
    NSLog(@"Error finding match:%@", error.localizedDescription);
}
//A peer-to-peer match has been found, the game should start
-(void)matchmakerViewController:(GKMatchmakerViewController *)viewController didFindMatch:(GKMatch *)match
{
    [m_presentingViewController dismissModalViewControllerAnimated:YES];
    m_match = match;
    m_match.delegate = self;
    if(!m_matchStarted && m_match.expectedPlayerCount == 0)
    {
        NSLog(@"Ready to start match!");
    }
}
//The match received data sent from the player.
-(void)match:(GKMatch *)match didReceiveData:(NSData *)data fromPlayer:(NSString *)playerID
{
    if(m_match != match)
        return;
    [m_delegate match:match didReceiveData:data fromPlayer:playerID];
}
//The player state changed(eg. connected or disconnected)
-(void)match:(GKMatch*)match player:(NSString *)playerID didChangeState:(GKPlayerConnectionState)state
{
    if(m_match != match)
        return;
    
    switch (state) {
        case GKPlayerStateConnected:
            //handle new player connection.
            NSLog(@"Player connected!");
            if (!m_matchStarted && match.expectedPlayerCount ==0)
            {
                NSLog(@"Ready to start match!");
            }
            break;
        case GKPlayerStateDisconnected:
            // a player just disconnected.
            NSLog(@"Player disconnected!");
            m_matchStarted = NO;
            [m_delegate matchEnded];
        default:
            break;
    }
}
//The match vas unable to connect with the player due to an error.
-(void)match:(GKMatch *)match connectionWithPlayerFailed:(NSString *)playerID withError:(NSError *)error
{
    if(m_match != match)
        return;
    NSLog(@"Failed to connect to player with error: %@", error.localizedDescription);
    m_matchStarted = NO;
    [m_delegate matchEnded];
}
//The match vas unable to be established vith any players due to an error.
-(void)match:(GKMatch *)match didFailWithError:(NSError *)error
{
    if(m_match != match)
        return;
    NSLog(@"Match failed with error:%@", error.localizedDescription);
    m_matchStarted = NO;
    [m_delegate matchEnded];
}
-(void)dealloc
{
    [super dealloc];
}
@end
